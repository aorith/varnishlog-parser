// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package content

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"strings"

	"github.com/aorith/varnishlog-parser/vsl"
	"github.com/aorith/varnishlog-parser/vsl/header"
)

const (
	SendToDomain = iota
	SendToBackend
	SendToLocalhost
	SendToCustom
)

type ReqBuilderForm struct {
	TXID            string
	HTTPS           bool
	OriginalHeaders bool
	OriginalURL     bool
	ResolveTo       int
	CustomResolve   string
}

func ReqBuilderTab(txsSet vsl.TransactionSet) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"tabRequest\" class=\"tabcontent\"><p>Here you can generate commands with <a href=\"https://curl.se/\" target=\"_blank\">curl</a> and other tools based on parsed VSL transaction tags. For POST/PUT requests, the <b>body is not available</b> in varnishlog and wonâ€™t be included.</p><form class=\"simple-form\" hx-post=\"reqbuilder/\" hx-target=\"#reqBuilderResults\" hx-swap=\"innerHTML settle:0.3s\" hx-include=\"[name=&#39;logs&#39;]\"><fieldset><legend>Transaction: </legend> <select id=\"transactionSelect\" name=\"transaction\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, tx := range txsSet.Transactions() {
			if tx.Type() != vsl.TxTypeSession {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var2 string
				templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(tx.TXID())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 42, Col: 32}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(tx.TXID())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 42, Col: 46}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select></fieldset><br><fieldset><legend>Protocol: </legend> <label><input type=\"checkbox\" name=\"https\" checked> https</label></fieldset><fieldset><legend>URL: </legend> <label><input type=\"radio\" name=\"urlType\" value=\"original\" checked> Original</label> <label><input type=\"radio\" name=\"urlType\" value=\"final\"> Final</label></fieldset><fieldset><legend>Headers: </legend> <label><input type=\"radio\" name=\"headerType\" value=\"original\" checked> Original</label> <label><input type=\"radio\" name=\"headerType\" value=\"final\"> Final</label></fieldset><br><fieldset><legend>Send To: </legend> <label><input type=\"radio\" name=\"sendTo\" value=\"domain\" checked> Domain</label> <label><input type=\"radio\" name=\"sendTo\" value=\"localhost\"> Localhost</label><br><br><label><input type=\"radio\" name=\"sendTo\" value=\"backend\"> Backend:<br><select id=\"transactionBackend\" name=\"transactionBackend\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, tx := range txsSet.Transactions() {
			if tx.Type() == vsl.TxTypeBereq {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(getBackend(tx))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 89, Col: 38}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(tx.TXID())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 89, Col: 52}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" (")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(getBackend(tx))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 89, Col: 72}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(")</option>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select></label><br><br><label><input type=\"radio\" name=\"sendTo\" value=\"custom\"> Custom: <input type=\"text\" name=\"customResolve\" pattern=\".*:.*\" placeholder=\"&lt;IPADDR&gt;:&lt;PORT&gt;\"></label></fieldset><br><button class=\"btn loading\">Generate</button></form><br><div id=\"reqBuilderResults\"></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func ReqBuild(txsSet vsl.TransactionSet, tx *vsl.Transaction, f ReqBuilderForm) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"fade-me-in\"><h3>curl</h3><pre><code>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.Raw(curlCommand(tx, f)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</code></pre><h3>python</h3><pre><code>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.Raw(pythonCommand(tx, f)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</code></pre></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func curlCommand(t *vsl.Transaction, f ReqBuilderForm) string {
	var s strings.Builder

	hdrState := header.NewHeaderState(t.LogRecords(), false)

	// Find the host header
	hostHdr := hdrState.FindHeader("host", f.OriginalHeaders, true)
	if hostHdr == nil {
		return "Host header not found!"
	}

	// Find the URL
	var url vsl.Record
	if f.OriginalURL {
		url = t.FirstRecordOfType(vsl.URLRecord{})
	} else {
		url = t.LastRecordOfType(vsl.URLRecord{})
	}
	if url == nil {
		return "URL not found!"
	}

	port := "80"
	protocol := "http"
	if f.HTTPS {
		port = "443"
		protocol = "https"
	}
	s.WriteString(fmt.Sprintf(`curl "%s://%s%s"`+" \\\n", protocol, hostHdr.HeaderValue(), url.Value()))

	// Method
	method := t.FirstRecordOfType(vsl.MethodRecord{})
	if method == nil {
		return "Method not found!"
	}

	switch method.Value() {
	case "GET":
		// Nothing
	case "POST", "PUT":
		s.WriteString("    -X " + method.Value() + " \\\n")
		s.WriteString("    -d '' \\\n")
	default:
		s.WriteString("    -X " + method.Value() + " \\\n")
	}

	// Add headers
	var hdrVal string
	for _, hc := range hdrState {
		if hc.Header() == "host" || (f.OriginalHeaders && !hc.IsOriginalHeader()) {
			continue
		}
		if f.OriginalHeaders {
			hdrVal = hc.OriginalValue()
		} else {
			hdrVal = hc.FinalValue()
		}
		hdrVal = strings.ReplaceAll(hdrVal, `"`, `\"`)
		s.WriteString(fmt.Sprintf(`    -H "%s: %s" \`+"\n", hc.Header(), hdrVal))
	}

	// Fixed options
	s.WriteString("    -s -k -v -o /dev/null")

	// Optional resolve
	switch f.ResolveTo {
	case SendToLocalhost:
		s.WriteString(" \\\n    --resolve " + hostHdr.HeaderValue() + ":" + port + ":127.0.0.1")
	case SendToBackend, SendToCustom:
		custom := strings.SplitN(f.CustomResolve, ":", 2)
		if custom[0] == "none" {
			return "Backed address not found for selected transaction."
		}
		if len(custom) < 2 {
			return "Incorrect backend address."
		}
		s.WriteString(" \\\n    --resolve " + hostHdr.HeaderValue() + ":" + custom[1] + ":" + custom[0])

		if (f.HTTPS && custom[1] == "80") || (!f.HTTPS && custom[1] == "443") {
			s.WriteString("\n\n# Incorrect protocol selected?")
		}
	}

	return s.String()
}

func pythonCommand(t *vsl.Transaction, f ReqBuilderForm) string {
	var s strings.Builder

	hdrState := header.NewHeaderState(t.LogRecords(), false)

	// Find the host header
	hostHdr := hdrState.FindHeader("host", f.OriginalHeaders, true)
	if hostHdr == nil {
		return "Host header not found!"
	}

	// Find the URL
	var url vsl.Record
	if f.OriginalURL {
		url = t.FirstRecordOfType(vsl.URLRecord{})
	} else {
		url = t.LastRecordOfType(vsl.URLRecord{})
	}
	if url == nil {
		return "URL not found!"
	}

	// Set the protocol and port
	port := "80"
	protocol := "http"
	if f.HTTPS {
		port = "443"
		protocol = "https"
	}

	s.WriteString("import requests\n\n")

	includeHostHdr := false

	// Optional resolve
	switch f.ResolveTo {
	case SendToLocalhost:
		s.WriteString(fmt.Sprintf("url = \"%s://%s%s\"\n\n", protocol, "127.0.0.1:"+port, url.Value()))
		includeHostHdr = true
	case SendToBackend, SendToCustom:
		custom := strings.SplitN(f.CustomResolve, ":", 2)
		if custom[0] == "none" {
			return "Backed address not found for selected transaction."
		}
		if len(custom) < 2 {
			return "Incorrect backend address."
		}
		s.WriteString(fmt.Sprintf("url = \"%s://%s%s\"\n\n", protocol, custom[0]+":"+custom[1], url.Value()))
		includeHostHdr = true
	default:
		s.WriteString(fmt.Sprintf("url = \"%s://%s%s\"\n\n", protocol, hostHdr.HeaderValue(), url.Value()))
	}

	// Add headers
	s.WriteString("headers = {\n")
	if includeHostHdr {
		s.WriteString(fmt.Sprintf("    \"%s\": \"%s\",\n", "Host", hostHdr.HeaderValue()))
	}
	for _, hc := range hdrState {
		if hc.Header() == "host" || (f.OriginalHeaders && !hc.IsOriginalHeader()) {
			continue
		}
		var hdrVal string
		if f.OriginalHeaders {
			hdrVal = hc.OriginalValue()
		} else {
			hdrVal = hc.FinalValue()
		}
		hdrVal = strings.ReplaceAll(hdrVal, `"`, `\"`)
		s.WriteString(fmt.Sprintf("    \"%s\": \"%s\",\n", hc.Header(), hdrVal))
	}
	s.WriteString("}\n\n")

	// Method
	method := t.FirstRecordOfType(vsl.MethodRecord{})
	if method == nil {
		return "Method not found!"
	}
	switch method.Value() {
	case "GET":
		s.WriteString("response = requests.get(url, headers=headers, verify=False)\n")
	case "POST", "PUT":
		s.WriteString("response = requests." + strings.ToLower(method.Value()) + "(url, headers=headers, verify=False, data={})\n")
	default:
		s.WriteString("response = requests." + strings.ToLower(method.Value()) + "(url, headers=headers, verify=False)\n")
	}

	s.WriteString("\nprint(response.status_code)\nprint(response.text)\n")

	return s.String()
}

func getBackend(t *vsl.Transaction) string {
	r := t.FirstRecordOfType(vsl.BackendOpenRecord{})
	if r == nil {
		return "none"
	}
	record := r.(vsl.BackendOpenRecord)
	return fmt.Sprintf("%s:%d", record.RemoteAddr().String(), record.RemotePort())
}

var _ = templruntime.GeneratedTemplate
