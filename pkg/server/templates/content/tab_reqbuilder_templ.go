// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package content

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"strings"

	"github.com/aorith/varnishlog-parser/pkg/render"
	"github.com/aorith/varnishlog-parser/vsl"
	"github.com/aorith/varnishlog-parser/vsl/tag"
)

type ReqBuilderForm struct {
	Scheme    string
	Received  bool   // Use received headers
	Excluded  string // Excluded headers, split by comma
	ConnectTo string
}

func ReqBuilderTab(txsSet vsl.TransactionSet) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"tabRequest\" class=\"tabcontent\"><p>Here you can generate commands with <a href=\"https://curl.se/\" target=\"_blank\">curl</a> and other tools based on parsed VSL transaction tags. For POST/PUT requests, <b>body is not available</b> in varnishlog and wonâ€™t be included.</p><form class=\"simple-form\" hx-post=\"reqbuilder/\" hx-target=\"#reqBuilderResults\" hx-swap=\"innerHTML settle:0.3s\" hx-include=\"[name='logs']\"><fieldset><legend>Scheme:</legend> <label><input type=\"radio\" name=\"scheme\" value=\"auto\" checked> Auto</label> <label><input type=\"radio\" name=\"scheme\" value=\"http://\"> Http</label> <label><input type=\"radio\" name=\"scheme\" value=\"https://\"> Https</label></fieldset><br><fieldset><legend>Headers:</legend> <label title=\"Headers as originally sent by the client or backend\"><input type=\"radio\" name=\"headers\" value=\"received\" checked> Received</label> <label title=\"Headers after VCL processing (rewrites, additions, removals)\"><input type=\"radio\" name=\"headers\" value=\"processed\"> VCL Processed</label><br><br><label>Excluded headers: <input type=\"text\" name=\"excluded\" placeholder=\"header1, header2, ...\" value=\"\"></label></fieldset><br><fieldset><legend>Connect To: </legend> <label><input type=\"radio\" name=\"connectTo\" value=\"auto\" checked> Auto</label> <label><input type=\"radio\" name=\"connectTo\" value=\"none\"> None</label><br><br><label><input type=\"radio\" name=\"connectTo\" value=\"backend\"> Backend:<br><select id=\"transactionBackend\" name=\"transactionBackend\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, tx := range txsSet.Transactions() {
			if tx.Type() == vsl.TxTypeBereq {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<option value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var2 string
				templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(getBackend(tx))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 79, Col: 38}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(tx.TXID())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 79, Col: 52}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " (")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(getBackend(tx))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 79, Col: 72}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, ")</option>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</select></label><br><br><label><input type=\"radio\" name=\"connectTo\" value=\"custom\"> Custom: <input type=\"text\" name=\"custom\" pattern=\"^.+:[0-9]+$\" placeholder=\"<HOST/IP>:<PORT>\"></label></fieldset><br><button class=\"btn loading\">Generate</button></form><br><div id=\"reqBuilderResults\"></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ReqBuild(txsSet vsl.TransactionSet, f ReqBuilderForm) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<div class=\"fade-me-in\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, tx := range txsSet.Transactions() {
			if tx.Type() != vsl.TxTypeSession {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<h3>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(tx.TXID())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/server/templates/content/tab_reqbuilder.templ`, Line: 103, Col: 19}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</h3><pre><code>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.Raw(curlCommand(tx, f)).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</code></pre>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func curlCommand(tx *vsl.Transaction, f ReqBuilderForm) string {
	var backend *render.Backend

	switch f.ConnectTo {
	case "none":
		backend = nil
	case "auto":
		if tx.Type() == vsl.TxTypeBereq {
			br := tx.RecordByTag(tag.BackendOpen, false)
			bo := br.(vsl.BackendOpenRecord)
			host, port, err := render.ParseBackend(fmt.Sprintf("%s:%d", bo.RemoteAddr().String(), bo.RemotePort()))
			if err != nil {
				return "error parsing backend: " + err.Error()
			}
			backend = render.NewBackend(host, port)
		}
	default:
		host, port, err := render.ParseBackend(f.ConnectTo)
		if err != nil {
			return "error parsing backend: " + err.Error()
		}
		backend = render.NewBackend(host, port)
	}

	// Parse optional excluded headers
	excluded := []string{}
	if f.Excluded != "" {
		parts := strings.Split(f.Excluded, ",")
		for _, h := range parts {
			name := vsl.CanonicalHeaderName(strings.TrimSpace(h))
			excluded = append(excluded, name)
		}
	}

	httpReq, err := render.NewHTTPRequest(tx, f.Received, excluded)
	if err != nil {
		return "error generating curl command: " + err.Error()
	}

	return httpReq.CurlCommand(f.Scheme, backend)
}

func getBackend(t *vsl.Transaction) string {
	r := t.RecordByTag(tag.BackendOpen, true)
	if r == nil {
		return "none"
	}
	record := r.(vsl.BackendOpenRecord)
	return fmt.Sprintf("%s:%d", record.RemoteAddr().String(), record.RemotePort())
}

var _ = templruntime.GeneratedTemplate
