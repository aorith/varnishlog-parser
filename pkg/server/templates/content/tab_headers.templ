package content

import (
	"github.com/aorith/varnishlog-parser/vsl"
	"log"
)

func HeadersTab(txsSet vsl.TransactionSet) templ.Component {
	return headersTab(txsSet)
}

templ headersTab(txsSet vsl.TransactionSet) {
	<div id="tabHeaders" class="tabcontent">
		<p>
			This tab displays the state of HTTP headers, organized into transaction groups.
			For each transaction of type "request" or "backend request," four tables show the state of the headers.
		</p>
		<p>Headers have four states:</p>
		<table class="headers-legend">
			<tr>
				<th class="diffOriginal">Original:</th>
				<td>Headers present before any VCL processing, as initially sent by the client.</td>
			</tr>
			<tr>
				<th class="diffModified">Modified:</th>
				<td>Headers that originated from the client but were subsequently modified in VCL.</td>
			</tr>
			<tr>
				<th class="diffDeleted">Deleted:</th>
				<td>Original headers that have been removed during VCL processing.</td>
			</tr>
			<tr>
				<th class="diffAdded">Added:</th>
				<td>New headers introduced by VCL that were not part of the original request.</td>
			</tr>
		</table>
		<br/>
		<br/>
		{{ visited := make(map[string]bool) }}
		<div class="headers">
			for _, root := range txsSet.UniqueRootParents() {
				<div class="headers-tbl-container">
					<table class="headers-table">
						<thead><tr><th colspan="3">Headers for tx group "{ root.TXID() }"</th></tr></thead>
						for _, comp := range renderHeaderTree(root, visited) {
							@comp
						}
					</table>
				</div>
			}
		</div>
	</div>
}

func renderHeaderTree(tx *vsl.Transaction, visited map[string]bool) (comps []templ.Component) {
	if visited[tx.TXID()] {
		log.Printf("renderHeaderTree(): loop detected at transaction %q\n", tx.TXID())
		return nil
	}
	visited[tx.TXID()] = true

	reqName := "ReqHeader"
	respName := "RespHeader"
	if tx.Type() == vsl.TxTypeBereq {
		reqName = "BereqHeader"
		respName = "BerespHeader"
	}

	for _, r := range tx.LogRecords() {
		switch record := r.(type) {
		case vsl.BeginRecord:
			if tx.Type() != vsl.TxTypeSession {
				comps = append(comps, renderTxHeaderTree(tx, tx.ReqHeaders(), reqName))
			}

		case vsl.LinkRecord:
			childTx := tx.Children()[record.TXID()]
			if childTx != nil {
				comps = append(comps, renderHeaderTree(childTx, visited)...)
			}

		case vsl.EndRecord:
			if tx.Type() != vsl.TxTypeSession {
				comps = append(comps, renderTxHeaderTree(tx, tx.RespHeaders(), respName))
			}
		}
	}

	return comps
}

templ renderTxHeaderTree(tx *vsl.Transaction, headers vsl.Headers, hdrTitle string) {
	<tr class="hdr-type">
		<th>{ hdrTitle }</th>
		<th>Received</th>
		<th>Processed</th>
	</tr>
	for _, h := range headers.GetSortedHeaders() {
		{{ received := h.Values(true) }}
		{{ processed := h.Values(false) }}
		{{ numValues := max(len(received), len(processed)) }}
		for i := 0; i < numValues; i++ {
			<tr>
				if i == 0 {
					<th class="hdrname" rowspan="{ maxRows }">{ h.Name() }</th>
				}
				if i < len(received) {
					@renderHeader(received[i].Value(), getHeaderDiffAttrs(received[i].State()))
				} else {
					<td></td>
				}
				if i < len(processed) {
					@renderHeader(processed[i].Value(), getHeaderDiffAttrs(processed[i].State()))
				} else {
					<td></td>
				}
			</tr>
		}
	}
}

templ renderHeader(value string, attrs templ.Attributes) {
	<td>
		<input { attrs ... } type="text" disabled value={ value }/>
	</td>
}

func getHeaderDiffAttrs(state vsl.HdrState) templ.Attributes {
	switch state {
	case vsl.HdrStateReceived:
		return templ.Attributes{"class": "diffOriginal"}
	case vsl.HdrStateAdded:
		return templ.Attributes{"class": "diffAdded"}
	case vsl.HdrStateModified:
		return templ.Attributes{"class": "diffModified"}
	case vsl.HdrStateDeleted:
		return templ.Attributes{"class": "diffDeleted"}
	}
	return templ.Attributes{"class": "diffOriginal"}
}
