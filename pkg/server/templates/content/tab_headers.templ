package content

import (
	"io"
	"log"
	"context"

	"github.com/aorith/varnishlog-parser/vsl"
)

func HeadersTab(txsSet vsl.TransactionSet) templ.Component {
	visited := make(map[string]bool)
	return headersTab(txsSet, visited)
}

templ headersTab(txsSet vsl.TransactionSet, visited map[string]bool) {
	<div id="tabHeaders" class="tabcontent">
		<p>
			This tab displays the state of HTTP headers, organized into transaction groups.
			For each transaction of type "request" or "backend request," four tables show the state of the headers.
		</p>
		<p>Headers have four states:</p>
		<table class="headers-legend">
			<tr>
				<th class="diffOriginal">Original:</th>
				<td>Headers present before any VCL processing, as initially sent by the client.</td>
			</tr>
			<tr>
				<th class="diffModified">Modified:</th>
				<td>Headers that originated from the client but were subsequently modified in VCL.</td>
			</tr>
			<tr>
				<th class="diffDeleted">Deleted:</th>
				<td>Original headers that have been removed during VCL processing.</td>
			</tr>
			<tr>
				<th class="diffAdded">Added:</th>
				<td>New headers introduced by VCL that were not part of the original request.</td>
			</tr>
		</table>
		<br/>
		<br/>
		for _, root := range txsSet.UniqueRootParents() {
			<h4>Headers for tx group "{ root.TXID() }"</h4>
			<div class="headers">
				@renderHeaderTree(root, visited)
			</div>
		}
	</div>
}

func renderHeaderTree(tx *vsl.Transaction, visited map[string]bool) templ.Component {
	if visited[tx.TXID()] {
		log.Printf("renderHeaderTree(): loop detected at transaction %q\n", tx.TXID())
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			return nil
		})
	}
	visited[tx.TXID()] = true

	return renderTxHeaderTree(tx, visited)
}

templ renderTxHeaderTree(tx *vsl.Transaction, visited map[string]bool) {
	if tx.Type() != vsl.TxTypeSession {
		<details>
			<summary>{ tx.TXID() }</summary>
			<table class="headers-table">
				<tr>
					<tr class="hdr-type"><th colspan="2"><abbr title="Headers as initially sent by the client, before any VCL processing.">Original Headers</abbr></th></tr>
					for _, h := range tx.ReqHeaders().GetSortedHeaders() {
						for _, v := range h.Values(true) {
							@renderHeader(h.Name(), v.Value(), getHeaderDiffAttrs(v.State()))
						}
					}
					<tr class="hdr-type"><th colspan="2"><abbr title="State of the headers after VCL processing.">VCL Headers</abbr></th></tr>
					for _, h := range tx.ReqHeaders().GetSortedHeaders() {
						for _, v := range h.Values(false) {
							@renderHeader(h.Name(), v.Value(), getHeaderDiffAttrs(v.State()))
						}
					}
					<tr class="hdr-type"><th colspan="2"><abbr title="Headers as initially sent by the client, before any VCL processing.">Original Response Headers</abbr></th></tr>
					for _, h := range tx.RespHeaders().GetSortedHeaders() {
						for _, v := range h.Values(true) {
							@renderHeader(h.Name(), v.Value(), getHeaderDiffAttrs(v.State()))
						}
					}
					<tr class="hdr-type"><th colspan="2"><abbr title="State of the response headers after VCL processing.">VCL Response Headers</abbr></th></tr>
					for _, h := range tx.RespHeaders().GetSortedHeaders() {
						for _, v := range h.Values(false) {
							@renderHeader(h.Name(), v.Value(), getHeaderDiffAttrs(v.State()))
						}
					}
				</tr>
			</table>
		</details>
	}
	if len(tx.ChildrenSortedByVXID()) > 0 {
		for _, c := range tx.ChildrenSortedByVXID() {
			@renderHeaderTree(c, visited)
		}
	}
}

templ renderHeader(name, value string, attrs templ.Attributes) {
	<tr>
		<th>{ name }</th>
		<td { attrs ... }>
			{ value }
		</td>
	</tr>
}

func getHeaderDiffAttrs(state vsl.HdrState) templ.Attributes {
	switch state {
	case vsl.HdrStateReceived:
		return templ.Attributes{"class": "diffOriginal"}
	case vsl.HdrStateAdded:
		return templ.Attributes{"class": "diffAdded"}
	case vsl.HdrStateModified:
		return templ.Attributes{"class": "diffModified"}
	case vsl.HdrStateDeleted:
		return templ.Attributes{"class": "diffDeleted"}
	}
	return templ.Attributes{"class": "diffOriginal"}
}
