package content

import (
	"github.com/aorith/varnishlog-parser/vsl"
	"github.com/aorith/varnishlog-parser/vsl/header"
)

templ HeadersTab(txsSet vsl.TransactionSet) {
	<div id="tabHeaders" class="tabcontent">
		<p>
			This tab displays the state of HTTP headers, organized into transaction groups.
			For each transaction of type "request" or "backend request," four tables show the state of the headers.
		</p>
		<p>Headers have four states:</p>
		<table class="headers-legend">
			<tr>
				<th class="diffOriginal">Original:</th>
				<td>Headers present before any VCL processing, as initially sent by the client.</td>
			</tr>
			<tr>
				<th class="diffModified">Modified:</th>
				<td>Headers that originated from the client but were subsequently modified in VCL.</td>
			</tr>
			<tr>
				<th class="diffDeleted">Deleted:</th>
				<td>Original headers that have been removed during VCL processing.</td>
			</tr>
			<tr>
				<th class="diffAdded">Added:</th>
				<td>New headers introduced by VCL that were not part of the original request.</td>
			</tr>
		</table>
		<br/>
		<br/>
		for _, root := range txsSet.UniqueRootParents() {
			<h4>Headers for tx group "{ root.TXID() }"</h4>
			<div class="headers">
				@wrapRenderHeaderTree(root)
			</div>
		}
	</div>
}

func wrapRenderHeaderTree(t *vsl.Transaction) templ.Component {
	reqHeadersState := header.NewHeaderState(t.LogRecords(), false)
	respHeadersState := header.NewHeaderState(t.LogRecords(), true)
	return renderHeaderTree(t, reqHeadersState, respHeadersState)
}

templ renderHeaderTree(t *vsl.Transaction, reqHeadersState, respHeadersState header.HeaderStates) {
	if t.Type() != vsl.TxTypeSession {
		<details>
			<summary>{ t.TXID() }</summary>
			<table class="headers-table">
				<tr>
					<tr class="hdr-type"><th colspan="2"><abbr title="Headers as initially sent by the client, before any VCL processing.">Original Headers</abbr></th></tr>
					for _, hc := range reqHeadersState {
						if hc.IsOriginalHeader() {
							<tr>
								@renderHeaderDiff(hc, true, getHeaderDiffAttrs(header.OriginalHdr))
							</tr>
						}
					}
					<tr class="hdr-type"><th colspan="2"><abbr title="State of the headers after VCL processing.">VCL Headers</abbr></th></tr>
					for _, hc := range reqHeadersState {
						<tr>
							@renderHeaderDiff(hc, false, getHeaderDiffAttrs(hc.State()))
						</tr>
					}
					<tr class="hdr-type"><th colspan="2"><abbr title="Headers as initially sent by the client, before any VCL processing.">Original Response Headers</abbr></th></tr>
					for _, hc := range respHeadersState {
						if hc.IsOriginalHeader() {
							<tr>
								@renderHeaderDiff(hc, true, getHeaderDiffAttrs(header.OriginalHdr))
							</tr>
						}
					}
					<tr class="hdr-type"><th colspan="2"><abbr title="State of the response headers after VCL processing.">VCL Response Headers</abbr></th></tr>
					for _, hc := range respHeadersState {
						<tr>
							@renderHeaderDiff(hc, false, getHeaderDiffAttrs(hc.State()))
						</tr>
					}
				</tr>
			</table>
		</details>
	}
	if len(t.ChildrenSortedByVXID()) > 0 {
		for _, c := range t.ChildrenSortedByVXID() {
			@wrapRenderHeaderTree(c)
		}
	}
}

func getHeaderDiffAttrs(state int) templ.Attributes {
	switch state {
	case header.OriginalHdr:
		return templ.Attributes{"class": "diffOriginal"}
	case header.AddedHdr:
		return templ.Attributes{"class": "diffAdded"}
	case header.ModifiedHdr:
		return templ.Attributes{"class": "diffModified"}
	case header.DeletedHdr:
		return templ.Attributes{"class": "diffDeleted"}
	}
	return templ.Attributes{"class": "diffOriginal"}
}

templ renderHeaderDiff(hc header.HeaderState, original bool, attrs templ.Attributes) {
	<th>{ hc.Header() }</th>
	<td { attrs ... }>
		if original {
			{ hc.OriginalValue() }
		} else {
			{ hc.FinalValue() }
		}
	</td>
}
